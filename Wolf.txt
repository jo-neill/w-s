package joe;//import java.awt.Color;import was.Move;import was.GameBoard;import was.GameLocation;import java.util.ArrayList;import java.util.List;//Down is +, right is +public class Wolf extends was.WolfPlayer {    GameBoard board;    GameLocation start, destination, myLocation;    ArrayList<GameLocation> sheepFlock, pastures, obstacles;    List<GameLocation> path;    @Override    public Move move() {        board = getGameBoard();        sheepFlock = board.getSheepPositions();        myLocation = this.getLocation();        //If theres no sheep left, dont move        //I think this solves a nullpointer exception i was getting        if (getPrioritySheep() == -1) {            return new Move(0, 0);        }        destination = sheepFlock.get(getPrioritySheep());        PathFinder pathFinder = new PathFinder(board, myLocation, destination);        List<Node> pathNodes = pathFinder.findPath();        path = pathFinder.getPathLocations(pathNodes);        int xDist = getHorizontalDistance(path.get(1), myLocation);        int yDist = getVerticalDistance(path.get(1), myLocation);        if (path.size() <= 2) {            return new Move(getHorizontalDistance(path.get(1), myLocation), getVerticalDistance(path.get(1), myLocation));        }        return new Move(xDist, yDist).scaledToLength(board.maxWolfDistance);    }    private int getHorizontalDistance(GameLocation destination, GameLocation myLocation) {        return destination.x - myLocation.x;    }    private int getVerticalDistance(GameLocation destination, GameLocation myLocation) {        return destination.y - myLocation.y;    }    public int getPrioritySheep() {        double distanceFromPasture, distanceFromMe, avgDistanceFromSheep, targetFactor;        ArrayList<Double> pastureDistances;        ArrayList<Double> tempTargetFactors;        ArrayList<Double> targetFactors = new ArrayList<Double>();        //sorry        targetFactors.add(999999999.9);        for (int i = 0; i < sheepFlock.size(); i++) {            pastureDistances = new ArrayList<Double>();            pastureDistances.add(99999999.9);            avgDistanceFromSheep = 0;            for (int y = 0; y < pastures.size(); y++) {                distanceFromPasture = Math.abs(sheepFlock.get(i).x - pastures.get(y).x) + Math.abs(sheepFlock.get(i).y - pastures.get(y).y);                if (pastureDistances.get(0) > distanceFromPasture) {                    pastureDistances.remove(0);                    pastureDistances.add(distanceFromPasture);                }            }            distanceFromPasture = pastureDistances.get(0);            distanceFromMe = Math.abs(sheepFlock.get(i).x - myLocation.x) + Math.abs(sheepFlock.get(i).y - myLocation.y);            for (int j = 0; j < sheepFlock.size(); j++) {                avgDistanceFromSheep += Math.abs(sheepFlock.get(i).x - sheepFlock.get(j).x) + Math.abs(sheepFlock.get(i).y - sheepFlock.get(j).y);            }            avgDistanceFromSheep /= sheepFlock.size();            targetFactor = distanceFromPasture / 8 + distanceFromMe / 7 + avgDistanceFromSheep * 4;            targetFactors.add(targetFactor);        }        tempTargetFactors = targetFactors;        while (tempTargetFactors.size() > 1) {            if (tempTargetFactors.get(1) < tempTargetFactors.get(0)) {                tempTargetFactors.remove(0);            } else {                tempTargetFactors.remove(1);            }        }        int targetIndex = 0;        for (int x = 0; x < targetFactors.size(); x++) {            if (targetFactors.get(x) == tempTargetFactors.get(0)) {                targetIndex = x;            }        }        if (sheepFlock.isEmpty()) {            return -1;        }        return targetIndex;    }    @Override    public void initialize() {        start = this.getLocation();        board = getGameBoard();        pastures = board.getPasturePositions();    }}